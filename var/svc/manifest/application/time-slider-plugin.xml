<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<!--

 CDDL HEADER START

 The contents of this file are subject to the terms of the
 Common Development and Distribution License, Version 1.0 only
 (the "License").  You may not use this file except in compliance
 with the License.

 You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 or http://www.opensolaris.org/os/licensing.
 See the License for the specific language governing permissions
 and limitations under the License.

 When distributing Covered Code, include this CDDL HEADER in each
 file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 If applicable, add the following below this CDDL HEADER, with the
 fields enclosed by brackets "[]" replaced with your own identifying
 information: Portions Copyright [yyyy] [name of copyright owner]

 CDDL HEADER END

 Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
 Use is subject to license terms.

-->

<service_bundle type='manifest' name='SUNWgnome-time-slider'>

<service
	name='application/time-slider/plugin'
	type='service'
	version='0.2.96'>

	<!-- we need time-slider  -->
	<dependency
		name='time-slider'
		grouping='require_all'
		restart_on='refresh'
		type='service'>
		<service_fmri value='svc:/application/time-slider' />
	</dependency>

	<!--
	    These are bare bones, basic plugin methods. More
	    complex plugin instances should define their own
	    specifically tailored start/stop/refresh methods.
	-->
	<exec_method
		type='method'
		name='start'
		exec='/lib/svc/method/time-slider-plugin start'
		timeout_seconds='10'>
    </exec_method>

	<exec_method
		type='method'
		name='stop'
		exec=':true'
		timeout_seconds='10'>
	</exec_method>

	<property_group name='startd' type='framework'>
		<propval name='duration' type='astring' value='transient' />
	</property_group>

	<property_group name='general' type='framework'>
		<propval name='action_authorization' type='astring'
			value='solaris.smf.manage.zfs-auto-snapshot' />
		<propval name='value_authorization' type='astring'
			value='solaris.smf.manage.zfs-auto-snapshot' />
	</property_group>


	<!-- The properties we expect that any plugin instance will define:

	trigger_command: A fully expanded command path plus all required arguments for
	         invocation of the plugin's trigger command. The purpose of
	         trigger_command is for notification when time-sliderd has created a
	         set of scheduled snapshots. The plugin can opt to take action immediately
	         or defer further actions until some later stage.

	verbose: Send extra, verbose output to standard error and syslog for
             analytical and debugging purposes if set to "true"
    trigger_on: A comma seperated list of auto-snapshot SMF service instances
                upon which to execute the command specified by plugin/command.
                The keyword "all" serves as a wildcard value matching all
                enabled auto-snapshot SMF instances, or as an example, a value
                of "hourly,daily" would trigger the plugin for snapshot events
                corresponding to the following SMF service instances:
                svc://system/filesystem/zfs/auto-snapshot:hourly
                svc://system/filesystem/zfs/auto-snapsoht:daily
	 -->

	<property_group name="plugin" type="application">
		<propval name="trigger_command" type="astring"
			value="Not Set" override="true"/>
		<propval name="verbose" type="boolean"
			value="false" override="true"/>
		<propval name="trigger_on" type="astring"
			value="hourly,daily,weekly,monthly" override="true"/>
	</property_group>


	<!-- We now define a plugin instance: "zfs-send"
	     to perform "zfs(1) send" based backups--> 

	<!-- This instance sends full or if possible, incremental
	     snapshot streams of the newly created snapshots.
	     Incremental streams are determined by the existance of the
	     zfs property:
	     "org.opensolaris:time-slider-plugin:zfs-send".

	     The value of this property represents the snapshot label
	     after the "@" of the previously sent snapshot and is set on
	     each filesystem or volume that was previously backed up using
	     the zfs-send plugin instance.
	     To force a full send of the snapshot stream, this property
	     needs to be unset using "zfs(1) inherit"

	     In order to avoid deletion of the previously backed up snapshot
	     necessary for sending incremental snapshot streams, the zfs-send
	     plugin instance places a "zfs(1) hold" on each backed up snapshot
	     using the following tag:
	     
	     "org.opensolaris:time-slider-plugin:zfs-send"
	     
	     Before attempting to commence a subsequent snapshot backup, a 
	     hold is placed on the new snapshot using the above tag.
	     When the subsequent backup completes successfully, the hold on the
	     previous snapshot is released.

		 If a snapshot backup, either incremental or full fails for any reason,
		 the hold on the effected snapshots is not released. The administrator
		 will need to release these holds once the backup problem is fixed. 
	-->

	<instance name='zfs-send' enabled='false' >
	<property_group name='general' type='framework'>
		<propval name='action_authorization' type='astring'
		value='solaris.smf.manage.zfs-auto-snapshot' />
		<propval name='value_authorization' type='astring'
		value='solaris.smf.manage.zfs-auto-snapshot' />
	</property_group>

	<property_group name="plugin" type="application">
		<propval name="command"
			type="astring" value="/usr/lib/time-slider/plugins/zfssend/zfssend" override="true"/>
	</property_group>

	<!-- Specify the command used to receive the snapshot stream.
	     The command will be executed via. pfexec(1).
	     As an example:
	     "/usr/sbin/zfs receive -F -u -d backuppool"
	     would receive snapshots streams locally to "backupool", overwriting
	     any pre-existing clashing fileystems on homepool, would not attempt to
	     mount the fileystem. See zfs(1) for more details
	-->

	<property_group name="receive" type="application">
		<propval name="command"
			type="astring" value="" override="true"/>
	</property_group>
	</instance>


	<instance name='rsync' enabled='false' >

	<exec_method
		type='method'
		name='start'
		exec='/lib/svc/method/time-slider-rsync start'
		timeout_seconds='10'>
    </exec_method>

	<exec_method
		type='method'
		name='stop'
		exec='/lib/svc/method/time-slider-rsync stop'
		timeout_seconds='10'>
	</exec_method>

	<property_group name='general' type='framework'>
		<propval name='action_authorization' type='astring'
		value='solaris.smf.manage.zfs-auto-snapshot' />
		<propval name='value_authorization' type='astring'
		value='solaris.smf.manage.zfs-auto-snapshot' />
	</property_group>

	<property_group name="plugin" type="application">
		<propval name="trigger_command"
			type="astring" value="/usr/lib/time-slider/plugins/rsync/rsync-trigger" override="true"/>
	</property_group>

	<property_group name="rsync" type="application">
		<propval name="target_dir"
			type="astring" value="" override="true"/>
		<propval name="target_key"
			type="astring" value='' override="true"/>
        <!-- Backups matching a schedule in this list will not be
             expired according to the standard auto-snapshot retention
             rules, and will instead be archived indefinitely on
             target_dir until it becomes necessary to delete them in
             order to recover space on target_dir.
        -->
        <propval name="archived_schedules"
			type="astring" value="weekly,monthly" override="true"/>
        <!-- Percentage of file system utilisation at which point
             this plugin will start deleting indefinitely archived
             backups in order to avoid the filesystem filling up
             completely. Backups get deleted in reverse chronological
             order. ie. oldest first until capacity falls back below
             cleanup_threshold's value, or there is only 1 remaining
             backup per fileystem remaining on the device, at which
             point it gives up.
        -->
		<propval name="cleanup_threshold"
			type="integer" value="95" override="true"/>
        <!-- If set to true, instruct rsync to produce extra verbose
        	 output using rsync's "-vv" command line option. Note that
        	 this is independent of the generic <plugin/verbose> 
        	 property, which governs verbosity of the plugin itself
        	 and not specifically rsync.
        -->
		<propval name="verbose"
			type="boolean" value="false" override="true"/>
	</property_group>
	</instance>

	<stability value='Unstable' />

	<template>
		<common_name>
			<loctext xml:lang='C'>Time Slider Plugin Framework</loctext>
		</common_name>
		<description>
			<loctext xml:lang='C'>
This service provides a mechanism for defining plugin actions for Time Slider

In order to use this service, you must enable the time-slider service plus at least one auto-snapshot
instance per set of automatic snapshots you want to take in addition to one or more Time Slider plugin
instnace.
When enabled, the time-slider service will execute the command defined by the plugin's SMF property
"plugin/command" after it creates snapshot(s) according to an enabled auto-snapshot instance.

Time Slider provides the following environment variables for consumption by the plugin's defined command:
AUTOSNAP_LABEL: The last component of the snapshot(s) name(s) (the part after the @)
AUTOSNAP_FMRI: The full SMF FMRI of the auto-snapshot instance corresponding to AUTOSNAP_LABEL
PLUGIN_FMRI: The full SMF FMRI of the plugin instance associated with the invocation of the plugin command
			</loctext>
		</description>
	</template>
</service>
</service_bundle>
